Main functions

-----------------------
S = BaSDI_main(O, pixel_size)

O: input localization data
   'O' can either be a simple array or a cell array
   If O is a simple array, each row of the array represents one
   localization event in the format of (y,x,frame). Frame starts at 1.
   If O is a cell array, each cell is a two-column array representing a
   single image frame.
   The y,x coordinates can be in any physical unit, e.g. 'nm', as long as
   it is the same unit for 'pixel_size'. Coordinate (0,0) represents top-left 
   of the image.
pixel_size: The pixle_size used for rendering the final corrected
	super-resolution image. It defaults to 1 if unspecified.

S: output structure. 
   S.theta: the corrected image.
   S.g:	  posterior distirbution funciton P(d_k|o,theta).
   S.e:     Drift probability of each frame w/o considering prior
   probability distribution P(d). Can be used as the input for
   compute the most likely drift trace using viterbi.m.


BaSDI_demo

A simple demo that randomly generate a drift trace and a set of single-molecule coordinates data as the input to BaSDI, then run 
BaSDI to estimate the drift and generate the corrected image.



---------------------

Utility functions


d_out = processing_result(g)
Output the expectation values of drift at each frame

g:     Use S.g from BaSDI output

d_out: Expectation values of the drift.


----


v = viterbi(e, p)
This is a general imprementation of viterbi algorithm. It return most likely state sequence based on viterbi algorithm.

e: The S.e output from BaSDI
p: sigma^2 of the prior. Default is 0.2

v: output. The most likely state sequence.


----


O1 = cat_cellarray(O, n)

Combine every n frames. 

This is useful when it is not desired to estimate drift for every frame (but every n frames) in order to speed up the computation.


